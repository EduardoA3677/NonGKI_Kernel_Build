name: Build Kernel Arch Google Pixel 7 Series (Official A15)

on:
  workflow_call:
  workflow_dispatch:
 
env:
  PYTHON_VERSION: "3" # Only 2(Ubuntu 22.04) or 3(Any OS Versions).
  PACK_METHOD: "Anykernel3" # Anykernel3 need SOURCE and BRANCH, MKBOOTIMG needn't it.
  PATCHES_SOURCE: "JackA1ltman/NonGKI_Kernel_Patches" # [your_name]/[your_patch] -> gooder123/NonGKI_Patcher
  PATCHES_BRANCH: "pixel_kernel" # [your_branch] -> main
  PROFILE_NAME: "gs201_pixel_a15.env" # your profile name.
  KPM_ENABLE: "false" # Only use it for SukiSU-Ultra.
  KPM_PATCH_SOURCE: "" # patch exec file source -> raw.githubusercontent.com/Test/Test/patch .
  GENERATE_DTB: "false" # if u kernel need DTB , but cannot auto generate it. (Only Anykernel3).
  GENERATE_CHIP: "qcom" # only supported for qcom and mediatek.
  BUILD_DEBUGGER: "false" # Output build errors.
  BUILD_OTHER_CONFIG: "false" # Merge config files.

jobs:
  build:
    name: Build Kernel by ${{ github.actor }} in Arch Linux
    runs-on: ubuntu-latest
    container: archlinux/archlinux:latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
      - uses: actions/checkout@v4
      - name: Prepare Configuration
        run: |
          CONFIG_ENV=$(grep -w "CONFIG_ENV" Profiles/${{ env.PROFILE_NAME }} | head -n 1 | cut -d "=" -f 2)
          CONFIG_LIST=(
              DEVICE_NAME
              DEVICE_CODENAME
              CUSTOM_CMDS
              EXTRA_CMDS
              KERNEL_SOURCE
              KERNEL_BRANCH
              CLANG_SOURCE
              CLANG_BRANCH
              GCC_GNU
              GCC_64_SOURCE
              GCC_64_BRANCH
              GCC_32_SOURCE
              GCC_32_BRANCH
              DEFCONFIG_SOURCE
              DEFCONFIG_NAME
              DEFCONFIG_ORIGIN_IMAGE
              AK3_SOURCE
              AK3_BRANCH
              BOOT_SOURCE
              LXC_ENABLE
              HAVE_NO_DTBO
              HAVE_NO_DTBO_TOOL
              ROM_TEXT

          )

          for CONFIG in "${CONFIG_LIST[@]}"; do
              if [[ "$CONFIG" == "EXTRA_CMDS" || "$CONFIG" == "CUSTOM_CMDS" ]]; then
                  echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
              else
                  echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
              fi
          done

          # Move patch folder to tmp
          mv $GITHUB_WORKSPACE/Patches /tmp/

      - name: Install necessary packages
        run: |
          cat /etc/os-release

          pacman -Syyu --noconfirm
          pacman -S git base-devel systemd wget rustup curl patch ccache automake flex lzop bison gperf zip curl bzip2 squashfs-tools pngcrush schedtool make optipng maven pwgen minicom bc unzip 7zip zstd binutils gcc python3 wget which --noconfirm

          # Update Rust Toolchain
          rustup default stable

      - name: Install GNU GCC
        if: env.GCC_GNU == 'true'
        run: |
          if [ -z ${{ env.GCC_64_SOURCE }} ] && [ -z ${{ env.GCC_32_SOURCE }} ]; then
            pacman -S aarch64-linux-gnu-binutils aarch64-linux-gnu-gcc aarch64-linux-gnu-glibc aarch64-linux-gnu-linux-api-headers --noconfirm
            pacman -S arm-none-eabi-binutils arm-none-eabi-gcc --noconfirm
            echo "GCC_64=CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
            echo "GCC_32=CROSS_COMPILE_ARM32=arm-none-eabi-" >> $GITHUB_ENV
          else
            echo "You needn't gcc powered by system."
          fi

      - name: Set Compile Environment
        run: |
          cd $GITHUB_WORKSPACE

          # Set GCC Aarch64
          if [ -z "${{ env.GCC_64_SOURCE }}" ]; then
            echo "Not set GCC 64!"
          else
            if [[ "${{ env.GCC_64_SOURCE }}" == *".git" ]]; then
              git clone ${{ env.GCC_64_SOURCE }} -b ${{ env.GCC_64_BRANCH }} gcc-64 --depth=1
            fi
            if [[ "${{ env.GCC_64_SOURCE }}" == *'.tar.gz' ]]; then
              wget -O gcc-64.tar.gz ${{ env.GCC_64_SOURCE }}
              mkdir gcc-64
              tar -C gcc-64/ -zxvf gcc-64.tar.gz
            fi
            if [[ "${{ env.GCC_64_SOURCE }}" == *'.zip' ]]; then
              wget -O gcc-64.zip ${{ env.GCC_64_SOURCE }}
              mkdir gcc-64
              unzip gcc-64.zip -d gcc-64/
            fi
            GCC_64_BIN=aarch64-linux-android-
            echo "GCC_64=CROSS_COMPILE=$GITHUB_WORKSPACE/gcc-64/bin/$GCC_64_BIN" >> $GITHUB_ENV
          fi


          # Set GCC ARM32
          if [ -z "${{ env.GCC_32_SOURCE }}" ]; then
            echo "Not set GCC 32!"
          else
            if [[ "${{ env.GCC_32_SOURCE }}" == *".git" ]]; then
              git clone ${{ env.GCC_32_SOURCE }} -b ${{ env.GCC_32_BRANCH }} gcc-32 --depth=1
            fi
            if [[ "${{ env.GCC_32_SOURCE }}" == *'.tar.gz' ]]; then
              wget -O gcc-32.tar.gz ${{ env.GCC_32_SOURCE }}
              mkdir gcc-32
              tar -C gcc-32/ -zxvf gcc-32.tar.gz
            fi
            if [[ "${{ env.GCC_32_SOURCE }}" == *'.zip' ]]; then
              wget -O gcc-32.zip ${{ env.GCC_32_SOURCE }}
              mkdir gcc-32
              unzip gcc-32.zip -d gcc-32/
            fi
            GCC_32_BIN=arm-linux-androideabi-
            echo "GCC_32=CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/gcc-32/bin/$GCC_32_BIN" >> $GITHUB_ENV
          fi

          # Set Clang
          if [[ "${{ env.CLANG_SOURCE }}" == *".git" ]]; then
            git clone ${{ env.CLANG_SOURCE }} -b ${{ env.CLANG_BRANCH }} clang-custom --depth=1
          elif [[ "${{ env.CLANG_SOURCE }}" == *'.tar.gz' ]]; then
            wget -O clang.tar.gz ${{ env.CLANG_SOURCE }}
            mkdir clang-custom
            tar -C clang-custom/ -zxvf clang.tar.gz
          elif [[ "${{ env.CLANG_SOURCE }}" == *'.tar.xz' ]]; then
            wget -O clang.tar.xz ${{ env.CLANG_SOURCE }}
            mkdir clang-custom
            tar -C clang-custom/ -xvf clang.tar.xz --strip-components 1
          elif [[ "${{ env.CLANG_SOURCE }}" == *'.zip' ]]; then
            wget -O clang.zip ${{ env.CLANG_SOURCE }}
            mkdir clang-custom
            unzip clang.zip -d clang-custom/
          elif [[ "${{ env.CLANG_SOURCE }}" == *"antman" ]]; then
            mkdir clang-custom
            cd clang-custom
            wget ${{ env.CLANG_SOURCE }} -O antman
            chmod +x antman
            bash antman -S
          else
            echo "You needn't clang!"
          fi

      - name: Get Kernel Source
        run: |
          cd $GITHUB_WORKSPACE
          git clone --recursive ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_BRANCH }} device_kernel --depth=1
          if [[ -n "${{ env.DEFCONFIG_SOURCE }}" ]]; then
            wget ${{ env.DEFCONFIG_SOURCE }} -O device_kernel/arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          elif [[ -n "${{ env.DEFCONFIG_ORIGIN_DEFCONFIG }}" ]]; then
            wget ${{ env.DEFCONFIG_ORIGIN_DEFCONFIG }} -O $GITHUB_WORKSPACE/device_kernel/Image
            $GITHUB_WORKSPACE/device_kernel/scripts/extract-ikconfig $GITHUB_WORKSPACE/device_kernel/Image > $GITHUB_WORKSPACE/device_kernel/arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          fi
          echo "KERNEL_VERSION=$(head -n 3 device_kernel/Makefile | grep -E 'VERSION|PATCHLEVEL' | awk '{print $3}' | paste -sd '.')" >> $GITHUB_ENV

      - name: Set KSU and SUSFS for DEFCONFIG
        run: |
          cd $GITHUB_WORKSPACE/device_kernel
          if [[ "${{ env.LXC_ENABLE }}" == "true" ]]; then
           echo "CONFIG_VIRTUALIZATION=y" >> android-kernel/arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
           echo "CONFIG_KVM=y" >> android-kernel/arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
           echo "CONFIG_VHOST_NET=y" >> android-kernel/arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
           echo "CONFIG_VHOST_CROSS_ENDIAN_LEGACY=y" >> android-kernel/arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
          fi

      - name: Set Pack Method and KernelSU and SUSFS
        run: |
          # Variable
          # Set ${{ env.PACK_METHOD }} and KernelSU
          if [[ ${{ env.PACK_METHOD }} == "Anykernel3" ]]; then
            cd $GITHUB_WORKSPACE/device_kernel
            if [[ -d "Anykernel3" ]]; then
              echo "Found Anykernel3 in Kernel!"
            else
              git clone ${{ env.AK3_SOURCE }} -b ${{ env.AK3_BRANCH }} Anykernel3 --depth=1
            fi
          elif [[ ${{ env.PACK_METHOD }} == "MKBOOTIMG" ]]; then
            cd $GITHUB_WORKSPACE
            git clone https://android.googlesource.com/platform/system/tools/mkbootimg $GITHUB_WORKSPACE/mkboottools -b main-kernel-build-2024 --depth=1
            wget ${{ env.BOOT_SOURCE }} -O $GITHUB_WORKSPACE/boot_source_${{ env.DEVICE_NAME }}.img
            cd device_kernel
          else
            false
          fi
          echo "PACK_METHOD=${{ env.PACK_METHOD }}" >> $GITHUB_ENV

          ## KPM Checker
          if [[ -d "${{ env.KERNELSU_NAME }}/kernel/kpm" ]]; then
            if [ -f "include/linux/set_memory.h" ] && [ "${{ env.KPM_ENABLE }}" == "true" ]; then
                echo "CONFIG_KPM=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
                wget "${{ env.KPM_PATCH_SOURCE }}" -o patch
                chmod a+x patch
                echo "Set KPM successfully !"
            elif [ "$KPM_ENABLE" == "true" ]; then
                echo "Your kernel doesn't support KPM !"
            else
                echo "Doesn't enable KPM !"
            fi
          fi

      
      - name: Added mkdtboimg to kernel (Experiment)
        if: env.HAVE_NO_DTBO == 'true' && env.HAVE_NO_DTBO_TOOL != 'true'
        run: |
          cd $GITHUB_WORKSPACE/device_kernel/scripts/dtc
          wget https://android.googlesource.com/platform/system/libufdt/+archive/refs/heads/main/utils/src.tar.gz
          tar zxvf src.tar.gz
          rm -f src.tar.gz

          cd $GITHUB_WORKSPACE/device_kernel
          cp /tmp/Patches/temp_dtbo.patch ./
          patch -p1 < temp_dtbo.patch
          sed -i '/targets := Image Image.bz2 Image.gz Image.lz4 Image.lzma Image.lzo/s/$/ dtbo.img/' ./arch/arm64/boot/Makefile
          sed -i '/$(obj)\/Image\.gz-dtb: $(obj)\/Image\.gz $(DTB_OBJS) FORCE/a \#DTBO\n$(obj)\/dtbo.img: $(DTBO_OBJS) FORCE\n\t$(call if_changed,mkdtimg)' ./arch/arm64/boot/Makefile
          sed -i '/KBUILD_DTBS\t:= dtbs/a \#DTBO\nKBUILD_DTBO_IMG := dtbo.img' ./arch/arm64/Makefile
          sed -i '/dtc-tmp = $(subst $(comma),_,$(dot-target)\.dts\.tmp)/a \#DTBO\n# mkdtimg\n#----------------------------------------------------------------------------\nquiet_cmd_mkdtimg = DTBOIMG $@\ncmd_mkdtimg = python3 $(srctree)\/scripts\/dtc\/mkdtboimg.py create $@ --page_size=4096 $(filter-out FORCE,$^)' ./scripts/Makefile.lib

      - name: Setup LXC (Experiment)
        if: env.LXC_ENABLE == 'true'
        run: |
          cd $GITHUB_WORKSPACE/device_kernel
          rm -rf lxc
          git clone https://github.com/tomxi1997/lxc-docker-support-for-android.git lxc
          echo 'source "lxc/Kconfig"' >> "Kconfig"

          echo "CONFIG_DOCKER=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}

          sed -i '/CONFIG_ANDROID_PARANOID_NETWORK/d' ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          echo "# CONFIG_ANDROID_PARANOID_NETWORK is not set" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}

          #sed -i '/CONFIG_LOCALVERSION/d' ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          #echo 'CONFIG_LOCALVERSION="-LXC"' >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}

          chmod +x $GITHUB_WORKSPACE/device_kernel/lxc/runcpatch.sh
          if [ -f $GITHUB_WORKSPACE/device_kernel/kernel/cgroup/cgroup.c ]; then
              sh $GITHUB_WORKSPACE/device_kernel/lxc/runcpatch.sh $GITHUB_WORKSPACE/device_kernel/kernel/cgroup/cgroup.c
          fi

          if [ -f $GITHUB_WORKSPACE/device_kernel/kernel/cgroup.c ]; then
              sh $GITHUB_WORKSPACE/device_kernel/lxc/runcpatch.sh $GITHUB_WORKSPACE/device_kernel/kernel/cgroup.c
          fi

          if [ -f $GITHUB_WORKSPACE/device_kernel/net/netfilter/xt_qtaguid.c ]; then
              patch -p0 < $GITHUB_WORKSPACE/device_kernel/lxc/xt_qtaguid.patch
          fi

          echo "LXC_ENABLE=lxc" >> $GITHUB_ENV

      - name: Patch Debugger
        if: env.BUILD_DEBUGGER == 'true'
        run: |
          cd $GITHUB_WORKSPACE/device_kernel/
          mapfile -t REJ_FILES < <(find . -type f -name "*.rej")
          if [ ${#REJ_FILES[@]} -eq 0 ]; then
            echo "Your kernel have no any rej files."
          else
            for CAT_REJ in "${REJ_FILES[@]}"; do
                echo "Found .rej file: $CAT_REJ"
                cat $CAT_REJ
                echo "==========EOF=========="
            done
            false
          fi

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: build-kernel-${{ env.DEVICE_NAME }}${{ env.UPLOADNAME }}
          max-size: 2G

      - name: Build Kernel
        run: |
          export PATH=$GITHUB_WORKSPACE/clang-custom/bin:$PATH
          ls -l $GITHUB_WORKSPACE/clang-custom/
          cd $GITHUB_WORKSPACE/device_kernel/

          if [ -z "${{ env.GCC_32 }}" ] && [ -z "${{ env.GCC_64 }}" ]; then
            # Solo Clang
            make CC="ccache clang" ARCH=arm64 ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} ${{ env.DEFCONFIG_NAME }}
            make -j$(nproc --all) CC="ccache clang" ARCH=arm64 ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }}

          elif [ -z "${{ env.GCC_32 }}" ]; then
            # GCC64 + Clang (sin GCC32)
            make ARCH=arm64 ${{ env.GCC_64 }} ${{ env.DEFCONFIG_NAME }}
            make -j$(nproc --all) ARCH=arm64 ${{ env.GCC_64 }}

          elif [ -z "${{ env.CLANG_SOURCE }}" ]; then
            # Solo GCC (64 y 32)
            make ARCH=arm64 ${{ env.GCC_64 }} ${{ env.DEFCONFIG_NAME }}
            make -j$(nproc --all) ARCH=arm64 ${{ env.GCC_64 }}

          else
            # Clang + GCC64 + GCC32
            make CC="ccache clang" ARCH=arm64 ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} ${{ env.GCC_64 }} ${{ env.DEFCONFIG_NAME }}
            make -j$(nproc --all) CC="ccache clang" ARCH=arm64 ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} ${{ env.GCC_64 }}

          fi

          ## Generate DTBO
          if [ "${{ env.HAVE_NO_DTBO }}" == "true" ] && [ "${{ env.HAVE_NO_DTBO_TOOL }}" == "true" ]; then
            cd $GITHUB_WORKSPACE/device_kernel
            mkdir dtbo_tool
            cd dtbo_tool
            wget https://android.googlesource.com/platform/system/libufdt/+archive/master/utils.tar.gz -o mkdtboimg.tar.gz
            tar zxvf mkdtboimg.tar.gz
            cd ../
            if [ -d "$GITHUB_WORKSPACE/device_kernel/out/arch/arm64/boot/dts/vendor" ]; then
                python dtbo_tool/src/mkdtboimg.py create $GITHUB_WORKSPACE/device_kernel/out/arch/arm64/boot/dtbo.img $GITHUB_WORKSPACE/device_kernel/out/arch/arm64/boot/dts/vendor/${{ env.GENERATE_CHIP }}/*.dtbo
            else
                python dtbo_tool/src/mkdtboimg.py create $GITHUB_WORKSPACE/device_kernel/out/arch/arm64/boot/dtbo.img $GITHUB_WORKSPACE/device_kernel/out/arch/arm64/boot/dts/${{ env.GENERATE_CHIP }}/*.dtbo
            fi
          fi

      - name: KPM Patcher (Experiment)
        if: env.KPM_ENABLE == 'true'
        run: |
          cd $GITHUB_WORKSPACE/device_kernel/
          IMAGE_DIR="$GITHUB_WORKSPACE/device_kernel/out/arch/arm64/boot"

          if [[ -f "$IMAGE_DIR/Image.gz-dtb" ]]; then
            echo "Not supported for old kernel !"
          elif [[ -f "$IMAGE_DIR/Image.gz" ]]; then
            rm -f $IMAGE_DIR/Image.gz
            cp patch $IMAGE_DIR/
            ./patch
            gzip -c Image > Image.gz
            echo "Hook Image successfully !"
          elif [[ -f "$IMAGE_DIR/Image" ]]; then
            cp patch $IMAGE_DIR/
            ./patch
            echo "Hook Image successfully !"
          fi

      - name: Make Anykernel3 Flasher
        if: env.PACK_METHOD == 'Anykernel3'
        run: |
          IMAGE_DIR="$GITHUB_WORKSPACE/device_kernel/out/arch/arm64/boot"
          TIME=$(date +"%Y%m%d%H%M%S")

          cd $GITHUB_WORKSPACE/device_kernel/

          mkdir -p tmp

          if [[ "${{ env.AK3_SOURCE }}" =~ "osm0sis" ]]; then
            sed -i 's/do.devicecheck=1/do.devicecheck=0/g' Anykernel3/anykernel.sh
            sed -i 's!BLOCK=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!BLOCK=auto;!g' Anykernel3/anykernel.sh
            sed -i 's/IS_SLOT_DEVICE=0;/is_slot_device=auto;/g' Anykernel3/anykernel.sh
            echo "Now using official Anykernel3."
          else
            echo "Now using custom Anykernel3."
          fi

          if [[ -f "$IMAGE_DIR/Image.gz-dtb" ]]; then
            cp -fp $IMAGE_DIR/Image.gz-dtb tmp
            echo "Found Image.gz-dtb !"
          elif [[ -f "$IMAGE_DIR/Image.gz" ]]; then
            cp -fp $IMAGE_DIR/Image.gz tmp
            echo "Found Image.gz !"
          elif [[ -f "$IMAGE_DIR/Image" ]]; then
            # gzip -c $IMAGE_DIR/Image > $IMAGE_DIR/Image.gz
            # cp -fp $IMAGE_DIR/Image.gz tmp
            cp -fp $IMAGE_DIR/Image tmp
            echo "Found Image !"
          fi

          if [[ -f "$IMAGE_DIR/dtbo.img" ]]; then
            cp -fp $IMAGE_DIR/dtbo.img tmp
            echo "Found dtbo.img !"
          else
            echo "Doesn't found dtbo.img! Your device maybe needn't the file."
          fi

          if [ -f "$IMAGE_DIR/dtb" ]; then
            echo "Found DTB!"
            cp -fp $IMAGE_DIR/dtb tmp
          elif [ "${{ env.GENERATE_DTB }}" == "true" ]; then
            if [ -d "$IMAGE_DIR/dts/${{ env.GENERATE_CHIP }}" ]; then
                cat $IMAGE_DIR/dts/${{ env.GENERATE_CHIP }}/*.dtb > $IMAGE_DIR/DTB
                cp -fp $IMAGE_DIR/DTB tmp
                echo "Generated ${{ env.GENERATE_CHIP }} DTB."
            elif [ -d "$IMAGE_DIR/dts/vendor/${{ env.GENERATE_CHIP }}" ]; then
                cat $IMAGE_DIR/dts/${{ env.GENERATE_CHIP }}/*.dtb > $IMAGE_DIR/DTB
                cp -fp $IMAGE_DIR/DTB tmp
                echo "Generated ${{ env.GENERATE_CHIP }} DTB."
            else
                echo "Missing .dtb file in dts or dts/vendor ! Generate Failed !"
                false
            fi
          else
            echo "Doesn't found DTB! Your device maybe needn't the file."
          fi

          cp -rp ./Anykernel3/* tmp
          cd tmp
          7za a -mx9 tmp.zip *
          cd ..
          cp -fp tmp/tmp.zip ${{ env.DEVICE_CODENAME }}-${{ env.ROM_TEXT }}-$TIME-${{ env.PACK_METHOD }}${{ env.LXC_STATUS }}.zip
          rm -rf tmp

          echo "PACK_NAME=${{ env.DEVICE_CODENAME }}-${{ env.ROM_TEXT }}-$TIME-${{ env.PACK_METHOD }}${{ env.LXC_STATUS }}.zip" >> $GITHUB_ENV

      - name: Make Latest Boot Image
        if: env.PACK_METHOD == 'MKBOOTIMG'
        run: |
          cd $GITHUB_WORKSPACE/
          IMAGE_DIR="$GITHUB_WORKSPACE/device_kernel/out/arch/arm64/boot"
          TIME=$(date +"%Y%m%d%H%M%S")
          FORMAT_MKBOOTING=$(echo `mkboottools/unpack_bootimg.py --boot_img=boot_source_${{ env.DEVICE_NAME }}.img --format mkbootimg`)

          mkboottools/unpack_bootimg.py --boot_img boot_source_${{ env.DEVICE_NAME }}.img

          if [[ -f "$IMAGE_DIR/Image.gz-dtb" ]]; then
            rm -f out/kernel
            cp -fp $IMAGE_DIR/Image.gz-dtb out/kernel
            echo "Found Image.gz-dtb !"
          elif [[ -f "$IMAGE_DIR/Image.gz" ]]; then
            rm -f out/kernel
            cp -fp $IMAGE_DIR/Image.gz out/kernel
            echo "Found Image.gz !"
          elif [[ -f "$IMAGE_DIR/Image" ]]; then
            rm -f out/kernel
            cp -fp $IMAGE_DIR/Image out/kernel
            echo "Found Image !"
          fi

          if [ -f "$IMAGE_DIR/dtb" ]; then
            echo "Found DTB!"
            cp -fp $IMAGE_DIR/dtb out/dtb
          elif [ "${{ env.GENERATE_DTB }}" == "true" ]; then
            if [ -d "$IMAGE_DIR/dts/${{ env.GENERATE_CHIP }}" ]; then
                cat $IMAGE_DIR/dts/${{ env.GENERATE_CHIP }}/*.dtb > $IMAGE_DIR/DTB
                cp -fp $IMAGE_DIR/DTB out/dtb
                echo "Generated ${{ env.GENERATE_CHIP }} DTB."
            elif [ -d "$IMAGE_DIR/dts/vendor/${{ env.GENERATE_CHIP }}" ]; then
                cat $IMAGE_DIR/dts/${{ env.GENERATE_CHIP }}/*.dtb > $IMAGE_DIR/DTB
                cp -fp $IMAGE_DIR/DTB out/dtb
                echo "Generated ${{ env.GENERATE_CHIP }} DTB."
            else
                echo "Missing .dtb file in dts or dts/vendor ! Generate Failed !"
                false
            fi
          else
            echo "Doesn't found DTB! Your device maybe needn't the file."
          fi

          eval "mkboottools/mkbootimg.py $FORMAT_MKBOOTING -o ${{ env.DEVICE_CODENAME }}-${{ env.ROM_TEXT }}-$TIME-image${{ env.LXC_STATUS }}.img"

          echo "PACK_NAME=${{ env.DEVICE_CODENAME }}-${{ env.ROM_TEXT }}-$TIME-image${{ env.LXC_STATUS }}.img" >> $GITHUB_ENV

          rm -f $GITHUB_WORKSPACE/boot_source_${{ env.DEVICE_NAME }}.img

      - name: Upload Build Artifacts For Boot Image
        if: env.PACK_METHOD == 'Anykernel3'
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-${{ env.PACK_NAME }}
          path: |
            device_kernel/${{ env.PACK_NAME }}

      - name: Upload Build Artifacts For Anykernel3
        if: env.PACK_METHOD == 'MKBOOTIMG'
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-${{ env.PACK_NAME }}
          path: |
            ${{ env.PACK_NAME }}
